run_d<-ode(times=times, y=start, func=seir,parms=parms)
run_d
sample(1:100)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
mean(x)^2
sum(x^2)
100*mean(x)^2
sum(x^2)
100*mean(x)^2
100*mean(x)^2
sum(x^2)
sum(x^2)
100*(mean(x)^2)
(mean(x)
)
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
mean(x)^2
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
x <- c(sample(1:100, replace = T))
sum(x)
sum(x^2)
100*(mean(x)^2)
knitr::opts_chunk$set(echo = TRUE)
nsims <- 2100 #Number of simulations, i.e. inter-event times
lambda <- 1.35 #Given
k <- 18 #Given
p <- 1 #Number of parameters to be estimated in a Poisson process = 1
interEventTimes <- rexp(nsims, lambda) #Theorem 4.2.3
Tn <- sum(interEventTimes) #How long it took for all events to take place, i.e. how long was the interval (0,t]
O <- matrix(0, k, 1) #Vector to store number of events in each interval
incrementLength <- Tn/k
j <- 1 #Counters through interEventTimes vector
for(i in 1:k){
eventNumber <- 0
while(sum(interEventTimes[1:j]) <= i*incrementLength && j<=2100){
eventNumber <- eventNumber + 1
j <- j + 1
}
O[i] <- eventNumber
}
sum(O)
nsims <- 2100 #Number of simulations, i.e. inter-event times
lambda <- 1.35 #Given
k <- 18 #Given
p <- 1 #Number of parameters to be estimated in a Poisson process = 1
interEventTimes <- rexp(nsims, lambda) #Theorem 4.2.3
Tn <- sum(interEventTimes) #How long it took for all events to take place, i.e. how long was the interval (0,t]
O <- matrix(0, k, 1) #Vector to store number of events in each interval
incrementLength <- Tn/k
j <- 1 #Counters through interEventTimes vector
for(i in 1:k){
eventNumber <- 0
while(sum(interEventTimes[1:j]) <= i*incrementLength && j<=2100){
eventNumber <- eventNumber + 1
j <- j + 1
}
O[i] <- eventNumber
}
sum(O)
nsims <- 2100 #Number of simulations, i.e. inter-event times
lambda <- 1.35 #Given
k <- 18 #Given
p <- 1 #Number of parameters to be estimated in a Poisson process = 1
interEventTimes <- rexp(nsims, lambda) #Theorem 4.2.3
Tn <- sum(interEventTimes) #How long it took for all events to take place, i.e. how long was the interval (0,t]
O <- matrix(0, k, 1) #Vector to store number of events in each interval
incrementLength <- Tn/k
j <- 1 #Counters through interEventTimes vector
for(i in 1:k){
eventNumber <- 0
while(sum(interEventTimes[1:j]) <= i*incrementLength && j<=2100){
eventNumber <- eventNumber + 1
j <- j + 1
}
O[i] <- eventNumber
}
sum(O)
nsims <- 2100 #Number of simulations, i.e. inter-event times
lambda <- 1.35 #Given
k <- 18 #Given
p <- 1 #Number of parameters to be estimated in a Poisson process = 1
interEventTimes <- rexp(nsims, lambda) #Theorem 4.2.3
Tn <- sum(interEventTimes) #How long it took for all events to take place, i.e. how long was the interval (0,t]
O <- matrix(0, k, 1) #Vector to store number of events in each interval
incrementLength <- Tn/k
j <- 1 #Counters through interEventTimes vector
for(i in 1:k){
eventNumber <- 0
while(sum(interEventTimes[1:j]) <= i*incrementLength && j<=2100){
eventNumber <- eventNumber + 1
j <- j + 1
}
O[i] <- eventNumber
}
sum(O)
nsims <- 2100 #Number of simulations, i.e. inter-event times
lambda <- 1.35 #Given
k <- 18 #Given
p <- 1 #Number of parameters to be estimated in a Poisson process = 1
interEventTimes <- rexp(nsims, lambda) #Theorem 4.2.3
Tn <- sum(interEventTimes) #How long it took for all events to take place, i.e. how long was the interval (0,t]
O <- matrix(0, k, 1) #Vector to store number of events in each interval
incrementLength <- Tn/k
j <- 1 #Counters through interEventTimes vector
for(i in 1:k){
eventNumber <- 0
while(sum(interEventTimes[1:j]) <= i*incrementLength && j<=2100){
eventNumber <- eventNumber + 1
j <- j + 1
}
O[i] <- eventNumber
}
sum(O)
#Differential Equations
#SIR model for measles
library(deSolve)
sir <- function(t, x, parms)  {
with(as.list(c(parms, x)), {
dS=-beta*I/1000*S
.....
output <- c(dS, ....)
list(output)
})
}
#the Initial values
start<-c(S=999, .... )
## The parameters
parms <- c(beta=0.8, ....)
## vector of timesteps
times <- seq(0, 50, 1/30)
run<-ode(times=times, y=start, func=sir,parms=parms)
plot(run[,2], col="red", ylim=c(0,1000), type="l", main="SIR Model")
prediction_dataset$file_paths
prediction_dataset <- read.csv("~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation/prediction_dataset")
img <- magick::image_read(prediction_dataset$file_paths[1])
getwd()
setwd('~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation')
img <- magick::image_read(prediction_dataset$file_paths[1])
prediction_dataset
prediction_dataset['file_paths']
prediction_dataset['file_paths']
prediction_dataset['file_paths'][1]
prediction_dataset['file_paths'][[1]]
prediction_dataset['file_paths']
prediction_dataset[1,'file_paths']
setwd('~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation')
img <- magick::image_read(prediction_dataset[1, 'file_paths'])
img
image_read(prediction_dataset[1, 'file_paths']
)
image_read(prediction_dataset[1, 'file_paths'])
magick::image_read(prediction_dataset[1, 'file_paths'])
img <- magick::image_read(prediction_dataset[1, 'file_paths'])
class(img)
img <- magick::image_read(prediction_dataset[1, 'file_paths'])
img
attr(img)
class(img)
img
img()
dim(pick_image)
dim(prediction_dataset)
dim(prediction_dataset)[1]
sample(1:dim(prediction_dataset)[1], 1)
sample(1:dim(prediction_dataset)[1], 1)
pick_image
prediction_dataset[random_index, 'file_paths']
random_index <- sample(1:dim(prediction_dataset)[1], 1)
prediction_dataset[random_index, 'file_paths']
prediction_dataset[random_index, ]
prediction_dataset[random_index, 'yhat']
prediction_dataset[random_index, 'yhat'] > 0.5
prediction
prediction_dataset[random_index, 'yhat']
prediction_dataset[random_index, ]
prediction_dataset[random_index, 'yhat']
prediction_dataset[random_index, 'yhat']
round(prediction_dataset[random_index, 'yhat'])
round(prediction_dataset[random_index, 'yhat'], 3)
round(prediction_dataset[random_index, 'yhat'], 10)
prediction_dataset[random_index, 'y']
classification <- function(yhat, y) {
if (yhat > 0.5) {
pred <- 'Parasitized'
confidence <- yhat
}
else {
pred <- 'Uninfected'
confidence <- 1-yhat
}
correct <- y == (yhat > 0.5)
}
classification <- function(yhat, y) {
if (yhat > 0.5) {
pred <- 'Parasitized'
confidence <- yhat
}
else {
pred <- 'Uninfected'
confidence <- 1-yhat
}
correct <- y == (yhat > 0.5)
list(pred, confidence, correct)
}
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
prediction_dataset[random_index, 'file_paths']
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
prediction_dataset[random_index, 'file_paths']
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
prediction_dataset[random_index, 'file_paths']
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
classification <- function(yhat, y) {
if (yhat > 0.5) {
pred <- 'Uninfected'
confidence <- yhat
}
else {
pred <- 'Parasitized'
confidence <- 1-yhat
}
correct <- y == (yhat > 0.5)
list(pred, confidence, correct)
}
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
random_index <- sample(1:dim(prediction_dataset)[1], 1)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
classification(prediction_dataset[random_index, 'yhat'], prediction_dataset[random_index, 'y'])
par(mfrow=4)
magick::image_read(prediction_dataset[random_index, 'file_paths'])
magick::image_read(prediction_dataset[random_index, 'file_paths'])
magick::image_read(prediction_dataset[random_index, 'file_paths'])
magick::image_read(prediction_dataset[random_index, 'file_paths'])
tmpfile <- img %>%
image_resize(input$size) %>%
image_implode(input$implode) %>%
image_blur(input$blur, input$blur) %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='png'), format = 'png')
library(dplyr)
library(magick)
library(dplyr)
tmpfile <- img %>%
image_resize(input$size) %>%
image_implode(input$implode) %>%
image_blur(input$blur, input$blur) %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='png'), format = 'png')
tmpfile <- img %>%
#image_resize(input$size) %>%
# image_implode(input$implode) %>%
#  image_blur(input$blur, input$blur) %>%
# image_rotate(input$rotation) %>%
image_write(tempfile(fileext='png'), format = 'png')
list(src = tmpfile, contentType = "image/png")
setwd('~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation')
prediction_dataset <- read.csv("~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation/prediction_dataset")
prediction_dataset <- read.csv("~/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets//prediction_dataset")
prediction_dataset <- read.csv("~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation/prediction_dataset")
library(magick)
setwd('~/Desktop/MSc Advanced Analytics/MMID/Assignment/implementation')
magick::image_read(~/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets/images/CNN Parameterization.png)
magick::image_read('~/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets/images/CNN Parameterization.png')
