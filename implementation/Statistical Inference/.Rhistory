library(dplyr)
# hyper parameters
xi <- c(0.5, 10, 25)
times <- c(0,3,7,14,21,28, 42)
# convert to long format
sub_data <- data[data$grp == 1, ]
names(sub_data)[2:(ncol(sub_data)-1)] <- times
data_long <- gather(sub_data, key = day, value = y, -profile_num, -grp)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyverse)
setwd("~/Desktop/MSc Advanced Analytics/Advanced Regression/Assignments/AR Assignment 2/")
data <- read.csv('dataset/R.csv', header = T, sep=';')
# hyper parameters
xi <- c(0.5, 10, 25)
times <- c(0,3,7,14,21,28, 42)
# convert to long format
sub_data <- data[data$grp == 1, ]
names(sub_data)[2:(ncol(sub_data)-1)] <- times
data_long <- gather(sub_data, key = day, value = y, -profile_num, -grp)
data_long$day <- as.numeric(data_long$day)
# ---- Compute Basis Functions ----x
compute_basis <- function(x, knot) {
a <- abs(x-knot)
a*log(a)
}
basis <- apply(matrix(xi), 1, FUN=compute_basis, x=data_long$day)
# ---- response variable ----x
y <- data_long$y
# ---- design matrix ----x
X <- do.call(cbind, list(1, basis))
# ---- Penalty Matrix ----x
D <- diag(ncol(X))
D[1,1] <- 0
require(MASS)
Gibbs_Sampler <- function(X, y, i1, i2, i3, i4, burnIn=0.5, n_samples=10000) {
phis <- matrix(NA, nrow=(burnIn*n_samples), ncol=ncol(X))
sig_e <- c()
sig_phi <- c()
n <- length(y)
d <- ncol(X)
se <- 1; sp <- 1
for (i in 1:n_samples) {
# ---- sample phi ----x
sig_p <- (diag(d)/sp + crossprod(X)/se)
mu_p <- (solve(sig_p)/se) %*% t(X) %*% y
phi <- mvrnorm(1, mu_p, sig_p)
# ---- sample se ----x
shape_se <- i1 + n/2
rate_se <- i2 + 0.5*crossprod(y - X %*% phi)
se <- 1/rgamma(1, shape=shape_se, rate=rate_se)
# ---- sample sp ----x
shape_sp <- i3 + d/2
rate_sp <- i4 + 0.5 * t(phi) %*% D %*% phi
sp <- 1/rgamma(1, shape=shape_sp, rate=rate_sp)
if (i>(n_samples*burnIn)) {
phis[i-(n_samples*burnIn),] <- phi
sig_e <- c(sig_e, se)
sig_phi <- c(sig_phi, sp)
}
}
# return posteriors
list(phi=phis, sig_e=sig_e, sig_phi=sig_phi)
}
res <- Gibbs_Sampler(X=X, y=y, 2, 0.1, 5, 0.1)
par(mfrow=c(2,2), col='darkred')
plot.ts(res$sig_e,  main='σ(error)')
plot.ts(res$sig_phi, main='σ(phi)')
hist(res$sig_e, breaks=60, col='darkred')
hist(res$sig_phi, breaks=60, col='darkred')
res$phi
par(mfrow=c(2,2), col='lightblue')
plot.ts(res$phi[,1])
plot.ts(res$phi[,2])
plot.ts(res$phi[,3])
plot.ts(res$phi[,4])
colMeans(res$phi)
par(mfrow=c(2,2))
hist(res$phi[,1], breaks = 60, main = 'b0', col = 'steelblue')
hist(res$phi[,2], breaks = 60, main = 'φ1', col = 'darkgreen')
hist(res$phi[,3], breaks = 60, main = 'φ2', col = 'darkblue')
hist(res$phi[,4], breaks = 60, main = 'φ3', col = 'steelblue')
yhat <- X %*% colMeans(res$phi)
plot(data_long$day, yhat)
plot(data_long$day, yhat, frame.plot = F, col='darkgreen', ylim = c(0,13), ylab='', xlab='', main='Mødel 1')
points(data_long$day, yhat)
plot(data_long$day, yhat, frame.plot = F, col='darkgreen', ylim = c(0,13), ylab='', xlab='', main='Mødel 1')
points(data_long$day, yhat)
yhat
data_long$day
plot(x=data_long$day, yy=hat, frame.plot = F, col='darkgreen', ylim = c(0,13), ylab='', xlab='', main='Mødel 1')
plot(x=data_long$day, y=yhat, frame.plot = F, col='darkgreen', ylim = c(0,13), ylab='', xlab='', main='Mødel 1')
plot(data_long$day, yhat)
plot(x=data_long$day, y=yhat)
plot(x=data_long$day, y=yhat,col='darkgreen', ylim = c(0,13), ylab='', xlab='', main='Mødel 1')
plot(x=data_long$day, y=yhat, frame.plot = F, col='darkgreen', ylab='', xlab='', main='Mødel 1')
plot(data_long$day, yhat, frame.plot = F, col='darkgreen', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='steelblue')
yhat <- X %*% colMeans(res$phi)
plot(data_long$day, yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
data[1,2:8]
days
data
plot(days, data[1,2:8], frame.plot = F, col='steelblue', ylim = c(0,13), ylab='', xlab='', main='Colour by Group')
lines(days, data[1,2:8], col='steelblue')
for (i in 2:50) {
col <- 'steelblue'
if (data[i,]$grp == 2) col <- 'darkred'
points(days, data[i,2:8], col=col)
lines(days, data[i,2:8], col=col)
}
data[1,2:8]
colMeans(data)
y
mean(y)
diag(d)
d <- ncol(X)
diag(d)
D
require(MASS)
Gibbs_Sampler <- function(X, y, D, i1, i2, i3, i4, burnIn=0.5, n_samples=10000) {
phis <- matrix(NA, nrow=(burnIn*n_samples), ncol=ncol(X))
sig_e <- c()
sig_phi <- c()
n <- length(y)
d <- ncol(X)
se <- 1; sp <- 1
for (i in 1:n_samples) {
# ---- sample phi ----x
sig_p <- (D/sp + crossprod(X)/se)
mu_p <- (solve(sig_p)/se) %*% t(X) %*% y
phi <- mvrnorm(1, mu_p, sig_p)
# ---- sample se ----x
shape_se <- i1 + n/2
rate_se <- i2 + 0.5*crossprod(y - X %*% phi)
se <- 1/rgamma(1, shape=shape_se, rate=rate_se)
# ---- sample sp ----x
shape_sp <- i3 + d/2
rate_sp <- i4 + 0.5 * t(phi) %*% D %*% phi
sp <- 1/rgamma(1, shape=shape_sp, rate=rate_sp)
if (i>(n_samples*burnIn)) {
phis[i-(n_samples*burnIn),] <- phi
sig_e <- c(sig_e, se)
sig_phi <- c(sig_phi, sp)
}
}
# return posteriors
list(phi=phis, sig_e=sig_e, sig_phi=sig_phi)
}
res <- Gibbs_Sampler(X=X, y=y, D=D, 2, 0.1, 5, 0.1)
par(mfrow=c(2,2), col='darkred')
plot.ts(res$sig_e,  main='σ(error)')
plot.ts(res$sig_phi, main='σ(phi)')
hist(res$sig_e, breaks=60, col='darkred')
hist(res$sig_phi, breaks=60, col='darkred')
res$phi
par(mfrow=c(2,2), col='lightblue')
plot.ts(res$phi[,1])
plot.ts(res$phi[,2])
plot.ts(res$phi[,3])
plot.ts(res$phi[,4])
colMeans(res$phi)
par(mfrow=c(2,2))
hist(res$phi[,1], breaks = 60, main = 'b0', col = 'steelblue')
hist(res$phi[,2], breaks = 60, main = 'φ1', col = 'darkgreen')
hist(res$phi[,3], breaks = 60, main = 'φ2', col = 'darkblue')
hist(res$phi[,4], breaks = 60, main = 'φ3', col = 'steelblue')
yhat <- X %*% colMeans(res$phi)
plot(data_long$day, yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
mean(yhat)
print(paste('mean parameter values: ', colMeans(res$phi))
)
print(paste('mean parameter values: ', colMeans(res$phi)))
colMeans(res$phi)
print(paste('mean parameter values: ', str(colMeans(res$phi))))
print(paste('mean parameter values: ', as.character(colMeans(res$phi))))
print(paste0('mean parameter values: ', colMeans(res$phi)))
print(paste('mean parameter values: ', colMeans(res$phi), collapse = F))
print(paste('mean parameter values: ', colMeans(res$phi), collapse = ''))
print(paste('mean parameter values: ', paste(colMeans(res$phi)) ))
paste(colMeans(res$phi))
paste(colMeans(res$phi), sep = '')
paste(colMeans(res$phi), collapse = '')
paste(colMeans(res$phi), collapse = '  ')
print(paste('mean parameter values: ', paste(colMeans(res$phi), collapse = '  ') ))
yhat <- X %*% colMeans(res$phi)
mean(yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
data_long
basis
X
data_long
D
require(MASS)
Gibbs_Sampler <- function(X, y, D, i1, i2, i3, i4, burnIn=0.5, n_samples=10000) {
phis <- matrix(NA, nrow=(burnIn*n_samples), ncol=ncol(X))
sig_e <- c()
sig_phi <- c()
n <- length(y)
d <- ncol(X)
se <- 1; sp <- 1
for (i in 1:n_samples) {
# ---- sample phi ----x
sig_p <- (D/sp + crossprod(X)/se)
mu_p <- (solve(sig_p)/se) %*% t(X) %*% y
phi <- mvrnorm(1, mu_p, sig_p)
# ---- sample se ----x
shape_se <- i1 + n/2
rate_se <- i2 + 0.5*crossprod(y - X %*% phi)
se <- 1/rgamma(1, shape=shape_se, rate=rate_se)
# ---- sample sp ----x
shape_sp <- i3 + d/2
rate_sp <- i4 + 0.5 * t(phi) %*% D %*% phi
sp <- 1/rgamma(1, shape=shape_sp, rate=rate_sp)
if (i>(n_samples*burnIn)) {
phis[i-(n_samples*burnIn),] <- phi
sig_e <- c(sig_e, se)
sig_phi <- c(sig_phi, sp)
}
}
# return posteriors
list(phi=phis, sig_e=sig_e, sig_phi=sig_phi)
}
require(MASS)
Gibbs_Sampler <- function(X, y, D, i1, i2, i3, i4, burnIn=0.5, n_samples=10000) {
phis <- matrix(NA, nrow=(burnIn*n_samples), ncol=ncol(X))
sig_e <- c()
sig_phi <- c()
n <- length(y)
d <- ncol(X)
se <- 10; sp <- 100
for (i in 1:n_samples) {
# ---- sample phi ----x
sig_p <- (D/sp + crossprod(X)/se)
mu_p <- (solve(sig_p)/se) %*% t(X) %*% y
phi <- mvrnorm(1, mu_p, sig_p)
# ---- sample se ----x
shape_se <- i1 + n/2
rate_se <- i2 + 0.5*crossprod(y - X %*% phi)
se <- 1/rgamma(1, shape=shape_se, rate=rate_se)
# ---- sample sp ----x
shape_sp <- i3 + d/2
rate_sp <- i4 + 0.5 * t(phi) %*% D %*% phi
sp <- 1/rgamma(1, shape=shape_sp, rate=rate_sp)
if (i>(n_samples*burnIn)) {
phis[i-(n_samples*burnIn),] <- phi
sig_e <- c(sig_e, se)
sig_phi <- c(sig_phi, sp)
}
}
# return posteriors
list(phi=phis, sig_e=sig_e, sig_phi=sig_phi)
}
res <- Gibbs_Sampler(X=X, y=y, D=D, 2, 0.1, 5, 0.1)
par(mfrow=c(2,2), col='darkred')
plot.ts(res$sig_e,  main='σ(error)')
plot.ts(res$sig_phi, main='σ(phi)')
hist(res$sig_e, breaks=60, col='darkred')
hist(res$sig_phi, breaks=60, col='darkred')
par(mfrow=c(2,2), col='lightblue')
plot.ts(res$phi[,1])
plot.ts(res$phi[,2])
plot.ts(res$phi[,3])
plot.ts(res$phi[,4])
print(paste('mean parameter values: ', paste(colMeans(res$phi), collapse = '  ')))
par(mfrow=c(2,2))
hist(res$phi[,1], breaks = 60, main = 'b0', col = 'steelblue')
hist(res$phi[,2], breaks = 60, main = 'φ1', col = 'darkgreen')
hist(res$phi[,3], breaks = 60, main = 'φ2', col = 'darkblue')
hist(res$phi[,4], breaks = 60, main = 'φ3', col = 'steelblue')
yhat <- X %*% colMeans(res$phi)
mean(yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
yhat <- X %*% rowMeans(res$phi)
rowMeans(res$phi)
res$phi
colMeans(res$phi)
X
X %*% colMeans(res$phi)
yhat <- X %*% colMeans(res$phi)
mean(yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
data_long
X
yhat
# ---- Penalty Matrix ----x
D <- diag(ncol(X))
D
res <- Gibbs_Sampler(X=X, y=y, D=D, 2, 0.1, 5, 0.1)
par(mfrow=c(2,2), col='darkred')
plot.ts(res$sig_e,  main='σ(error)')
plot.ts(res$sig_phi, main='σ(phi)')
hist(res$sig_e, breaks=60, col='darkred')
hist(res$sig_phi, breaks=60, col='darkred')
par(mfrow=c(2,2), col='lightblue')
plot.ts(res$phi[,1])
plot.ts(res$phi[,2])
plot.ts(res$phi[,3])
plot.ts(res$phi[,4])
print(paste('mean parameter values: ', paste(colMeans(res$phi), collapse = '  ')))
par(mfrow=c(2,2))
hist(res$phi[,1], breaks = 60, main = 'b0', col = 'steelblue')
hist(res$phi[,2], breaks = 60, main = 'φ1', col = 'darkgreen')
hist(res$phi[,3], breaks = 60, main = 'φ2', col = 'darkblue')
hist(res$phi[,4], breaks = 60, main = 'φ3', col = 'steelblue')
yhat <- X %*% colMeans(res$phi)
mean(yhat)
plot(data_long$day, yhat, frame.plot = F, col='steelblue', ylab='', xlab='', main='Mødel 1')
lines(data_long$day, yhat, col='darkgreen')
D[1,1] <- 0
require(MASS)
Gibbs_Sampler <- function(X, y, D, i1, i2, i3, i4, burnIn=0.5, n_samples=10000) {
phis <- matrix(NA, nrow=(burnIn*n_samples), ncol=ncol(X))
sig_e <- c()
sig_phi <- c()
n <- length(y)
d <- ncol(X)
se <- 10; sp <- 100
for (i in 1:n_samples) {
# ---- sample phi ----x
sig_p <- (D/sp + crossprod(X)/se)
mu_p <- (solve(sig_p)/se) %*% t(X) %*% y
phi <- mvrnorm(1, mu_p, sig_p)
# ---- sample se ----x
shape_se <- i1 + n/2
rate_se <- i2 + 0.5*crossprod(y - X %*% phi)
se <- 1/rgamma(1, shape=shape_se, rate=rate_se)
# ---- sample sp ----x
shape_sp <- i3 + d/2
rate_sp <- i4 + 0.5 * t(phi) %*% D %*% phi
sp <- 1/rgamma(1, shape=shape_sp, rate=rate_sp)
if (i>(n_samples*burnIn)) {
phis[i-(n_samples*burnIn),] <- phi
sig_e <- c(sig_e, se)
sig_phi <- c(sig_phi, sp)
}
}
# return posteriors
list(phi=phis, sig_e=sig_e, sig_phi=sig_phi)
}
par(mfrow=c(2,2))
hist(res$phi[,1], breaks = 60, main = 'b0', col = 'steelblue')
hist(res$phi[,2], breaks = 60, main = 'φ1', col = 'darkgreen')
hist(res$phi[,3], breaks = 60, main = 'φ2', col = 'darkblue')
hist(res$phi[,4], breaks = 60, main = 'φ3', col = 'steelblue')
par(mfrow=c(2,2), col='darkred')
plot.ts(res$sig_e,  main='σ(error)')
plot.ts(res$sig_phi, main='σ(phi)')
hist(res$sig_e, breaks=60, col='darkred')
hist(res$sig_phi, breaks=60, col='darkred')
# All available datasets
dirs <- list.dirs('~/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets', full.names=T)
dirs
read.csv("/Users/zachwolpe/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets/climate change CO2 emissions (kt)", skip=3)
read.csv("/Users/zachwolpe/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets/climate change CO2 emissions (kt)/API_19_DS2_en_csv_v2_1125137.csv", skip=3)
CO2_emissions <- read.csv("/Users/zachwolpe/Desktop/MSc Advanced Analytics/MMID/Assignment/datasets/climate change CO2 emissions (kt)/API_19_DS2_en_csv_v2_1125137.csv", skip=3)
1/7
# host proportions
x1 <- x2 <- x3 <- x4 <- x5 <- x6 <- x7 <- 1/7
# vector proportions
y1 <- y2 <- y3 <- 1/3
50:55
sample(50:150)
sample(50:150)
sample(50:150, 1)
0.2:5
0.07:0.9
# ----- HOST -----
x1 <- x2 <- x3 <- x4 <- x5 <- x6 <- x7 <- 1/7
mu <- sample(50:55, 1)           # year
theta <- sample(1:4, 1)          # day
alpha <- sample(2450:2964, 1)    # year
gamma_1 <- sample(15:19, 1)      # day
gamma <- sample(50:150, 1)       # day
pi_1 <- sample(40:60, 1)         # day
pi_2 <- sample(0.2:5, 1)         # year
pi_3 <- sample(1:20, 1)          # year
# ----- VECTOR -----
y1 <- y2 <- y3 <- 1/3
phi <- sample(25:65, 1)          # day
alpha_t <- sample(98:191.8, 1)   # day
mu_t <- sample(10:14, 1)         # day
sig_1 <- sample(10:26, 1)        # day
sig_2 <- sample(8:22, 1)         # day
mu_e <- sample(0.02:0.052, 1)    # day
# ----- INTERACTION ----
h <- sample(0.07:0.9, 1)         # day
f <- sample(0.13:0.25, 1)        # day
# ------------------ static parameters ------------------
# ----- HOST -----
x1 <- x2 <- x3 <- x4 <- x5 <- x6 <- x7 <- 1/7
mu <- sample(50:55, 1)/365       # year
theta <- sample(1:4, 1)          # day
alpha <- sample(2450:2964,1)/365 # year
gamma_1 <- sample(15:19, 1)      # day
gamma <- sample(50:150, 1)       # day
pi_1 <- sample(40:60, 1)         # day
pi_2 <- sample(0.2:5, 1)/365     # year
pi_3 <- sample(1:20, 1)/365      # year
# ----- VECTOR -----
y1 <- y2 <- y3 <- 1/3
phi <- sample(25:65, 1)          # day
alpha_t <- sample(98:191.8, 1)   # day
mu_t <- sample(10:14, 1)         # day
sig_1 <- sample(10:26, 1)        # day
sig_2 <- sample(8:22, 1)         # day
mu_e <- sample(0.02:0.052, 1)    # day
# ----- INTERACTION ----
h <- sample(0.07:0.9, 1)         # day
f <- sample(0.13:0.25, 1)        # day
# ------------------ Model ------------------
yang_model <- function(t, x, parms) {
with(as.list(c(parms, x)), {
dx1 <- mu + (theta + alpha)*x2 + pi_3*x6 - (h*y3 + mu)*x1
dx2 <- h*y3*x1 - (theta + gamma_1 + mu + alpha)*x2
dx3 <- gamma_1*x2 - (gamma + mu)*x3
dx4 <- gamma*x3 + h*y3*x5 + gamma_1*x7 - (pi_1 + mu)*x4
dx5 <- pi_1*x4 - (h*y3 + pi_2 + mu)*x5
dx6 <- pi_2*x5 + theta*x7 - (h*y3 + pi_3 + mu)*x6
dx7 <- h*y3*x6 - (theta + gamma_1 + mu)*x7
dy1 <- phi*sig_1/(sig_1+mu_e) * (y1 + y2 + y3) - (f*x3 + mu_t + alpha_t)*y1
dy2 <- f*x3*y1 - (sig_2 + mu_t + alpha_t)*y2
dy3 <- sig_2*y2 - (mu_t + alpha_t)*y3
output <- c(dx1, dx2, dx3, dx4, dx5, dx6, dx7, dy1, dy2, dy3)
list(output)
})
}
start <- c(x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7 )
parms <- c(mu=mu, theta=theta, alpha=alpha, gamma_1=gamma_1, gamma=gamma, pi_1=pi_1, pi_2=pi_2, pi_3=pi_3, y1=y1,
phi=phi, alpha_t=alpha_t, mu_t=mu_t, sig_1=sig_1, sig_2=sig_2, mu_e=mu_e, h=h, f=f)
times <- seq(0, 365, 1)
run_d<-ode(times=times, y=start, func=yang_model, parms=parms)
parms
run_d<-ode(times=times, y=start, func=yang_model, parms=parms)
library(deSolve)
run_d<-ode(times=times, y=start, func=yang_model, parms=parms)
start <- c(x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7, y1=y1, y2=y2=, y3=y3)
start <- c(x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7, y1=y1, y2=y2, y3=y3)
run_d<-ode(times=times, y=start, func=yang_model, parms=parms)
#summary(run_d)
plot(run_d[,2], col="red", ylim=c(0,1000), type="l", main="YANG Model", ylab="Population")
lines(run_d[,3], col="blue")
lines(run_d[,4], col="green")
legend("topright",legend=c("S", "I", "R"), col=c("red", "blue", "green"), lty=c(1,1,1))
plot(run_d[,2], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
plot(run_d[,2], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
lines(run_d[,3], col="blue")
lines(run_d[,4], col="green")
legend("topright",legend=c("S", "I", "R"), col=c("red", "blue", "green"), lty=c(1,1,1))
run_d
run_d[,1:8]
run_d[,1:9]
run_d[,1:8]
run_d
plot(run_d[,2], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
library(randomColor)
install.packages('randomColor')
install.packages('randomcoloR')
library(randomcoloR)
library(randomcoloR)
library(randomcoloR)
install.packages('V8')
library(randomcoloR)
library(V*)
library(V8)
library(randomcoloR)
install.packages("circlize")
library(circlize)
circlize::rand_color(1)
run_d
run_d[,1:8]
plot(run_d[,2], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
for (i in 2:8) {
lines(run_d[,i], col=circlize::rand_color(1))
}
run_d
run_d[,9:12]
run_d
run_d[,9:11]
plot(run_d[,9], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
for (i in 10:11) {
lines(run_d[,10:11], col=circlize::rand_color(1))
}
plot(run_d[,9], col="red", ylim=c(0,1), type="l", main="YANG Model", ylab="Population")
for (i in 10:11) {
lines(run_d[,i], col=circlize::rand_color(1))
}
run_d[,9:11]
set.seed(1)
nn <- 80
xx <- seq(from=-100, to=100, length=nn)
yy <- 1 + .005*((xx-10)) - 25*cos((xx-100)/50)+ rnorm(nn)*10
yy <- scale(yy, T,T)
# ---- Compute Basis Functions ----x
compute_cubic_basis <- function(x, number_of_basis) {
knots <- seq(range(x)[1], range(x)[2], length.out = number_of_basis+2)
knots <- knots[2:(length(knots)-1)] # drop first & last for singularity
compute_basis <- function(knot, x=x) {
v <- x-knot
v[v<0] <- 0
v
}
apply(matrix(knots), 1, FUN = compute_basis, x=x)
}
